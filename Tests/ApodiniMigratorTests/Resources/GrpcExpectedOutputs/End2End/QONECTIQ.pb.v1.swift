//
//  Created by ApodiniMigrator on 15.08.20
//  Copyright Â© 2020 TUM LS1. All rights reserved.
//

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

public enum QONECTIQ_CategoryStatus: SwiftProtobuf.Enum, CaseIterable {
    public typealias RawValue = Int
    
    case available // = 0
    case unavailable // = 1
    case UNRECOGNIZED(Int)
    
    public var rawValue: Int {
        switch self {
        case .available: return 0
        case .unavailable: return 1
        case let .UNRECOGNIZED(number): return number
        }
    }
    
    public static var allCases: [QONECTIQ_CategoryStatus] = [
        .available,
        .unavailable
    ]
    
    public init() {
        self = .available
    }
    
    public init(rawValue: Int) {
        switch rawValue {
        case 0: self = .available
        case 1: self = .unavailable
        default: self = .UNRECOGNIZED(rawValue)
        }
    }
}

public enum QONECTIQ_EventCategoryGroup: SwiftProtobuf.Enum, CaseIterable {
    public typealias RawValue = Int
    
    case marketing // = 0
    case blogging // = 1
    case coding // = 2
    case cooking // = 3
    case dating // = 4
    case travellinng // = 5
    case studying // = 6
    case science // = 7
    case UNRECOGNIZED(Int)
    
    public var rawValue: Int {
        switch self {
        case .marketing: return 0
        case .blogging: return 1
        case .coding: return 2
        case .cooking: return 3
        case .dating: return 4
        case .travellinng: return 5
        case .studying: return 6
        case .science: return 7
        case let .UNRECOGNIZED(number): return number
        }
    }
    
    public static var allCases: [QONECTIQ_EventCategoryGroup] = [
        .marketing,
        .blogging,
        .coding,
        .cooking,
        .dating,
        .travellinng,
        .studying,
        .science
    ]
    
    public init() {
        self = .marketing
    }
    
    public init(rawValue: Int) {
        switch rawValue {
        case 0: self = .marketing
        case 1: self = .blogging
        case 2: self = .coding
        case 3: self = .cooking
        case 4: self = .dating
        case 5: self = .travellinng
        case 6: self = .studying
        case 7: self = .science
        default: self = .UNRECOGNIZED(rawValue)
        }
    }
}

public enum QONECTIQ_Experience: SwiftProtobuf.Enum, CaseIterable {
    public typealias RawValue = Int
    
    case beginner // = 0
    case expert // = 1
    case UNRECOGNIZED(Int)
    
    public var rawValue: Int {
        switch self {
        case .beginner: return 0
        case .expert: return 1
        case let .UNRECOGNIZED(number): return number
        }
    }
    
    public static var allCases: [QONECTIQ_Experience] = [
        .beginner,
        .expert
    ]
    
    public init() {
        self = .beginner
    }
    
    public init(rawValue: Int) {
        switch rawValue {
        case 0: self = .beginner
        case 1: self = .expert
        default: self = .UNRECOGNIZED(rawValue)
        }
    }
}

public enum QONECTIQ_Rating: SwiftProtobuf.Enum, CaseIterable {
    public typealias RawValue = Int
    
    case outstanding // = 0
    case exceedsExpectation // = 1
    case meetsExpectation // = 2
    case needsImprovement // = 3
    case unacceptable // = 4
    case undefined // = 5
    case UNRECOGNIZED(Int)
    
    public var rawValue: Int {
        switch self {
        case .outstanding: return 0
        case .exceedsExpectation: return 1
        case .meetsExpectation: return 2
        case .needsImprovement: return 3
        case .unacceptable: return 4
        case .undefined: return 5
        case let .UNRECOGNIZED(number): return number
        }
    }
    
    public static var allCases: [QONECTIQ_Rating] = [
        .outstanding,
        .exceedsExpectation,
        .meetsExpectation,
        .needsImprovement,
        .unacceptable,
        .undefined
    ]
    
    public init() {
        self = .outstanding
    }
    
    public init(rawValue: Int) {
        switch rawValue {
        case 0: self = .outstanding
        case 1: self = .exceedsExpectation
        case 2: self = .meetsExpectation
        case 3: self = .needsImprovement
        case 4: self = .unacceptable
        case 5: self = .undefined
        default: self = .UNRECOGNIZED(rawValue)
        }
    }
}

public struct QONECTIQ_AddReviewHandlerInput {
    public var review: QONECTIQ_ReviewForm {
        get {
            return _review ?? QONECTIQ_ReviewForm()
        }
        set {
            _review = newValue
        }
    }
    
    public var hasReview: Bool {
        return _review != nil
    }
    
    public mutating func clearReview() {
        _review = nil
    }
    
    fileprivate var _review: QONECTIQ_ReviewForm? = QONECTIQ_ReviewForm()
    public var eventID: String = String()
    public var userID: String = String()
    
    public var unknownFields = SwiftProtobuf.UnknownStorage()
    
    public init() {}
}

public struct QONECTIQ_CategoryEventsHandlerInput {
    public var group: QONECTIQ_EventCategoryGroup = .marketing
    
    public var unknownFields = SwiftProtobuf.UnknownStorage()
    
    public init() {}
}

public struct QONECTIQ_CategoryEventsHandlerResponse {
    public var value: [QONECTIQ_Event] = []
    
    public var unknownFields = SwiftProtobuf.UnknownStorage()
    
    public init() {}
}

public struct QONECTIQ_DeleteEventHandlerInput {
    public var id: String = String()
    
    public var unknownFields = SwiftProtobuf.UnknownStorage()
    
    public init() {}
}

public struct QONECTIQ_DeleteUserHandlerInput {
    public var userID: String = String()
    
    public var unknownFields = SwiftProtobuf.UnknownStorage()
    
    public init() {}
}

public struct QONECTIQ_Event {
    public var id: String = String()
    public var title: String = String()
    public var summary: String = String()
    public var reviews: [QONECTIQ_Review] = []
    public var date: SwiftProtobuf.Google_Protobuf_Timestamp {
        get {
            return _date ?? SwiftProtobuf.Google_Protobuf_Timestamp()
        }
        set {
            _date = newValue
        }
    }
    
    public var hasDate: Bool {
        return _date != nil
    }
    
    public mutating func clearDate() {
        _date = nil
    }
    
    fileprivate var _date: SwiftProtobuf.Google_Protobuf_Timestamp? = SwiftProtobuf.Google_Protobuf_Timestamp()
    public var duration: UInt64 = 0
    public var imagePath: String = String()
    public var maxParticipants: UInt64 {
        get {
            return _maxParticipants ?? 0
        }
        set {
            _maxParticipants = newValue
        }
    }
    
    public var hasMaxParticipants: Bool {
        return _maxParticipants != nil
    }
    
    public mutating func clearMaxParticipants() {
        _maxParticipants = nil
    }
    
    fileprivate var _maxParticipants: UInt64? = 0
    public var organizer: String = String()
    public var tags: [String] = []
    public var category: QONECTIQ_EventCategory {
        get {
            return _category ?? QONECTIQ_EventCategory()
        }
        set {
            _category = newValue
        }
    }
    
    public var hasCategory: Bool {
        return _category != nil
    }
    
    public mutating func clearCategory() {
        _category = nil
    }
    
    fileprivate var _category: QONECTIQ_EventCategory? = QONECTIQ_EventCategory()
    
    public var unknownFields = SwiftProtobuf.UnknownStorage()
    
    public init() {}
}

public struct QONECTIQ_EventCategory {
    public var id: String = String()
    public var title: String = String()
    public var group: QONECTIQ_EventCategoryGroup = .marketing
    public var status: QONECTIQ_CategoryStatus = .available
    
    public var unknownFields = SwiftProtobuf.UnknownStorage()
    
    public init() {}
}

public struct QONECTIQ_EventMediator {
    public var date: SwiftProtobuf.Google_Protobuf_Timestamp {
        get {
            return _date ?? SwiftProtobuf.Google_Protobuf_Timestamp()
        }
        set {
            _date = newValue
        }
    }
    
    public var hasDate: Bool {
        return _date != nil
    }
    
    public mutating func clearDate() {
        _date = nil
    }
    
    fileprivate var _date: SwiftProtobuf.Google_Protobuf_Timestamp? = SwiftProtobuf.Google_Protobuf_Timestamp()
    public var duration: UInt64 {
        get {
            return _duration ?? 0
        }
        set {
            _duration = newValue
        }
    }
    
    public var hasDuration: Bool {
        return _duration != nil
    }
    
    public mutating func clearDuration() {
        _duration = nil
    }
    
    fileprivate var _duration: UInt64? = 0
    public var maxParticipants: UInt64 {
        get {
            return _maxParticipants ?? 0
        }
        set {
            _maxParticipants = newValue
        }
    }
    
    public var hasMaxParticipants: Bool {
        return _maxParticipants != nil
    }
    
    public mutating func clearMaxParticipants() {
        _maxParticipants = nil
    }
    
    fileprivate var _maxParticipants: UInt64? = 0
    
    public var unknownFields = SwiftProtobuf.UnknownStorage()
    
    public init() {}
}

public struct QONECTIQ_ExperienceUsersHandlerInput {
    public var experience: QONECTIQ_Experience = .beginner
    
    public var unknownFields = SwiftProtobuf.UnknownStorage()
    
    public init() {}
}

public struct QONECTIQ_ExperienceUsersHandlerResponse {
    public var value: [QONECTIQ_User] = []
    
    public var unknownFields = SwiftProtobuf.UnknownStorage()
    
    public init() {}
}

public struct QONECTIQ_GetAllUsersHandlerResponse {
    public var value: [QONECTIQ_User] = []
    
    public var unknownFields = SwiftProtobuf.UnknownStorage()
    
    public init() {}
}

public struct QONECTIQ_GetCategoriesHandlerResponse {
    public var value: [QONECTIQ_EventCategory] = []
    
    public var unknownFields = SwiftProtobuf.UnknownStorage()
    
    public init() {}
}

public struct QONECTIQ_GetCategoryHandlerInput {
    public var id: String = String()
    
    public var unknownFields = SwiftProtobuf.UnknownStorage()
    
    public init() {}
}

public struct QONECTIQ_GetEventHandlerInput {
    public var id: String = String()
    
    public var unknownFields = SwiftProtobuf.UnknownStorage()
    
    public init() {}
}

public struct QONECTIQ_GetEventsHandlerResponse {
    public var value: [QONECTIQ_Event] = []
    
    public var unknownFields = SwiftProtobuf.UnknownStorage()
    
    public init() {}
}

public struct QONECTIQ_GetParticipantsOfEventHandlerInput {
    public var eventID: String = String()
    
    public var unknownFields = SwiftProtobuf.UnknownStorage()
    
    public init() {}
}

public struct QONECTIQ_GetParticipantsOfEventHandlerResponse {
    public var value: [QONECTIQ_User] = []
    
    public var unknownFields = SwiftProtobuf.UnknownStorage()
    
    public init() {}
}

public struct QONECTIQ_GetUserHandlerInput {
    public var userID: String = String()
    
    public var unknownFields = SwiftProtobuf.UnknownStorage()
    
    public init() {}
}

public struct QONECTIQ_GroupCategoriesHandlerInput {
    public var groupCategory: QONECTIQ_EventCategoryGroup = .marketing
    
    public var unknownFields = SwiftProtobuf.UnknownStorage()
    
    public init() {}
}

public struct QONECTIQ_GroupCategoriesHandlerResponse {
    public var value: [QONECTIQ_EventCategory] = []
    
    public var unknownFields = SwiftProtobuf.UnknownStorage()
    
    public init() {}
}

public struct QONECTIQ_HomeFeed {
    public var id: String = String()
    public var userID: String = String()
    public var greeting: String = String()
    public var subtitle: String = String()
    public var searchBarText: String = String()
    public var events: [QONECTIQ_HomeFeedEvent] = []
    public var categories: [QONECTIQ_HomeFeedCategory] = []
    
    public var unknownFields = SwiftProtobuf.UnknownStorage()
    
    public init() {}
}

public struct QONECTIQ_HomeFeedCategory {
    public var categoryID: String = String()
    public var title: String = String()
    public var imageURL: String = String()
    public var eventsCount: UInt64 = 0
    
    public var unknownFields = SwiftProtobuf.UnknownStorage()
    
    public init() {}
}

public struct QONECTIQ_HomeFeedEvent {
    public var eventID: String = String()
    public var title: String = String()
    public var subtitle: String = String()
    public var imageURL: String = String()
    public var eventsCount: UInt64 = 0
    
    public var unknownFields = SwiftProtobuf.UnknownStorage()
    
    public init() {}
}

public struct QONECTIQ_HomeFeedHandlerInput {
    public var userID: String = String()
    
    public var unknownFields = SwiftProtobuf.UnknownStorage()
    
    public init() {}
}

public struct QONECTIQ_Review {
    public var id: String = String()
    public var title: String = String()
    public var content: String = String()
    public var eventID: String = String()
    public var reviewerID: String = String()
    public var summary: String = String()
    public var rating: QONECTIQ_Rating = .outstanding
    
    public var unknownFields = SwiftProtobuf.UnknownStorage()
    
    public init() {}
}

public struct QONECTIQ_ReviewForm {
    public var title: String = String()
    public var content: String = String()
    public var summary: String = String()
    public var rating: QONECTIQ_Rating = .outstanding
    
    public var unknownFields = SwiftProtobuf.UnknownStorage()
    
    public init() {}
}

public struct QONECTIQ_ReviewsHandlerInput {
    public var eventID: String = String()
    
    public var unknownFields = SwiftProtobuf.UnknownStorage()
    
    public init() {}
}

public struct QONECTIQ_ReviewsHandlerResponse {
    public var value: [QONECTIQ_Review] = []
    
    public var unknownFields = SwiftProtobuf.UnknownStorage()
    
    public init() {}
}

public struct QONECTIQ_UpdateEventHandlerInput {
    public var eventMediator: QONECTIQ_EventMediator {
        get {
            return _eventMediator ?? QONECTIQ_EventMediator()
        }
        set {
            _eventMediator = newValue
        }
    }
    
    public var hasEventMediator: Bool {
        return _eventMediator != nil
    }
    
    public mutating func clearEventMediator() {
        _eventMediator = nil
    }
    
    fileprivate var _eventMediator: QONECTIQ_EventMediator? = QONECTIQ_EventMediator()
    public var eventID: String = String()
    
    public var unknownFields = SwiftProtobuf.UnknownStorage()
    
    public init() {}
}

public struct QONECTIQ_User {
    public var id: String = String()
    public var name: String = String()
    public var surname: String = String()
    public var password: String = String()
    public var email: String = String()
    public var birthday: SwiftProtobuf.Google_Protobuf_Timestamp {
        get {
            return _birthday ?? SwiftProtobuf.Google_Protobuf_Timestamp()
        }
        set {
            _birthday = newValue
        }
    }
    
    public var hasBirthday: Bool {
        return _birthday != nil
    }
    
    public mutating func clearBirthday() {
        _birthday = nil
    }
    
    fileprivate var _birthday: SwiftProtobuf.Google_Protobuf_Timestamp? = SwiftProtobuf.Google_Protobuf_Timestamp()
    public var subscribedToNewsLetter: Bool = false
    public var experience: QONECTIQ_Experience = .beginner
    public var reviews: [QONECTIQ_Review] = []
    public var ownEvents: [QONECTIQ_Event] = []
    public var participatingEvents: [QONECTIQ_Event] = []
    public var eventsOfInterest: [QONECTIQ_Event] = []
    public var homeFeed: QONECTIQ_HomeFeed {
        get {
            return _homeFeed ?? QONECTIQ_HomeFeed()
        }
        set {
            _homeFeed = newValue
        }
    }
    
    public var hasHomeFeed: Bool {
        return _homeFeed != nil
    }
    
    public mutating func clearHomeFeed() {
        _homeFeed = nil
    }
    
    fileprivate var _homeFeed: QONECTIQ_HomeFeed? = QONECTIQ_HomeFeed()
    
    public var unknownFields = SwiftProtobuf.UnknownStorage()
    
    public init() {}
}

public struct QONECTIQ_UserLogin {
    public var userName: String = String()
    public var password: String = String()
    
    public var unknownFields = SwiftProtobuf.UnknownStorage()
    
    public init() {}
}

public struct QONECTIQ_UserRegisterForm {
    public var name: String = String()
    public var surname: String = String()
    public var password: String = String()
    public var birthday: SwiftProtobuf.Google_Protobuf_Timestamp {
        get {
            return _birthday ?? SwiftProtobuf.Google_Protobuf_Timestamp()
        }
        set {
            _birthday = newValue
        }
    }
    
    public var hasBirthday: Bool {
        return _birthday != nil
    }
    
    public mutating func clearBirthday() {
        _birthday = nil
    }
    
    fileprivate var _birthday: SwiftProtobuf.Google_Protobuf_Timestamp? = SwiftProtobuf.Google_Protobuf_Timestamp()
    public var email: String = String()
    public var subscribedToNewsLetter: Bool = false
    
    public var unknownFields = SwiftProtobuf.UnknownStorage()
    
    public init() {}
}

fileprivate let _protobuf_package = "QONECTIQ"

// MARK: - RuntimeSupport
extension QONECTIQ_CategoryStatus: SwiftProtobuf._ProtoNameProviding {
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "available"),
        1: .same(proto: "unavailable")
    ]
}

// MARK: - Codable
extension QONECTIQ_CategoryStatus: Codable {
    private var nameRawValue: String {
        switch self {
        case .available: return "available"
        case .unavailable: return "unavailable"
        default: fatalError("Can't derive nameRawValue for \(self)")
        }
    }
    
    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        
        try container.encode(self.nameRawValue)
    }
    
    public init(from decoder: Swift.Decoder) throws {
        let nameRawValue: String = try decoder.singleValueContainer().decode(String.self)
        switch nameRawValue {
        case "available": self = .available
        case "unavailable": self = .unavailable
        default: self = .available
        }
    }
}

// MARK: - RuntimeSupport
extension QONECTIQ_EventCategoryGroup: SwiftProtobuf._ProtoNameProviding {
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "marketing"),
        1: .same(proto: "blogging"),
        2: .same(proto: "coding"),
        3: .same(proto: "cooking"),
        4: .same(proto: "dating"),
        5: .same(proto: "travellinng"),
        6: .same(proto: "studying"),
        7: .same(proto: "science")
    ]
}

// MARK: - Codable
extension QONECTIQ_EventCategoryGroup: Codable {
    private var nameRawValue: String {
        switch self {
        case .marketing: return "marketing"
        case .blogging: return "blogging"
        case .coding: return "coding"
        case .cooking: return "cooking"
        case .dating: return "dating"
        case .travellinng: return "travellinng"
        case .studying: return "studying"
        case .science: return "science"
        default: fatalError("Can't derive nameRawValue for \(self)")
        }
    }
    
    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        
        try container.encode(self.nameRawValue)
    }
    
    public init(from decoder: Swift.Decoder) throws {
        let nameRawValue: String = try decoder.singleValueContainer().decode(String.self)
        switch nameRawValue {
        case "marketing": self = .marketing
        case "blogging": self = .blogging
        case "coding": self = .coding
        case "cooking": self = .cooking
        case "dating": self = .dating
        case "travellinng": self = .travellinng
        case "studying": self = .studying
        case "science": self = .science
        default: self = .marketing
        }
    }
}

// MARK: - RuntimeSupport
extension QONECTIQ_Experience: SwiftProtobuf._ProtoNameProviding {
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "beginner"),
        1: .same(proto: "expert")
    ]
}

// MARK: - Codable
extension QONECTIQ_Experience: Codable {
    private var nameRawValue: String {
        switch self {
        case .beginner: return "beginner"
        case .expert: return "expert"
        default: fatalError("Can't derive nameRawValue for \(self)")
        }
    }
    
    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        
        try container.encode(self.nameRawValue)
    }
    
    public init(from decoder: Swift.Decoder) throws {
        let nameRawValue: String = try decoder.singleValueContainer().decode(String.self)
        switch nameRawValue {
        case "beginner": self = .beginner
        case "expert": self = .expert
        default: self = .beginner
        }
    }
}

// MARK: - RuntimeSupport
extension QONECTIQ_Rating: SwiftProtobuf._ProtoNameProviding {
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "outstanding"),
        1: .same(proto: "exceedsExpectation"),
        2: .same(proto: "meetsExpectation"),
        3: .same(proto: "needsImprovement"),
        4: .same(proto: "unacceptable"),
        5: .same(proto: "undefined")
    ]
}

// MARK: - Codable
extension QONECTIQ_Rating: Codable {
    private var nameRawValue: String {
        switch self {
        case .outstanding: return "outstanding"
        case .exceedsExpectation: return "exceedsExpectation"
        case .meetsExpectation: return "meetsExpectation"
        case .needsImprovement: return "needsImprovement"
        case .unacceptable: return "unacceptable"
        case .undefined: return "undefined"
        default: fatalError("Can't derive nameRawValue for \(self)")
        }
    }
    
    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        
        try container.encode(self.nameRawValue)
    }
    
    public init(from decoder: Swift.Decoder) throws {
        let nameRawValue: String = try decoder.singleValueContainer().decode(String.self)
        switch nameRawValue {
        case "outstanding": self = .outstanding
        case "exceedsExpectation": self = .exceedsExpectation
        case "meetsExpectation": self = .meetsExpectation
        case "needsImprovement": self = .needsImprovement
        case "unacceptable": self = .unacceptable
        case "undefined": self = .undefined
        default: self = .outstanding
        }
    }
}

// MARK: - RuntimeSupport
extension QONECTIQ_AddReviewHandlerInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".AddReviewHandlerInput"
    
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "review"),
        2: .same(proto: "eventID"),
        3: .same(proto: "userID")
    ]
    
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        var decodedFieldNumbers: Set<Int> = []
        while let fieldNumber = try decoder.nextFieldNumber() {
            decodedFieldNumbers.insert(fieldNumber)
            switch fieldNumber {
            case 1: try {
                try decoder.decodeSingularMessageField(value: &_review)
            }()
            case 2: try {
                try decoder.decodeSingularStringField(value: &eventID)
            }()
            case 3: try {
                try decoder.decodeSingularStringField(value: &userID)
            }()
            default: break
            }
        }
    }
    
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try { if let value = _review {
            try visitor.visitSingularMessageField(value: value, fieldNumber: 1)
        } }()
        if !eventID.isEmpty {
            try visitor.visitSingularStringField(value: eventID, fieldNumber: 2)
        }
        if !userID.isEmpty {
            try visitor.visitSingularStringField(value: userID, fieldNumber: 3)
        }
        
        try unknownFields.traverse(visitor: &visitor)
    }
}

// MARK: - Codable
extension QONECTIQ_AddReviewHandlerInput: Codable {
    private enum CodingKeys: String, CodingKey {
        case review
        case eventID
        case userID
    }
    
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        
        try container.encodeIfPresent(_review, forKey: .review)
        try container.encode(eventID, forKey: .eventID)
        try container.encode(userID, forKey: .userID)
    }
    
    public init(from decoder: Swift.Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        
        _review = try container.decodeIfPresent(QONECTIQ_ReviewForm.self, forKey: .review)
        eventID = try container.decode(String.self, forKey: .eventID)
        userID = try container.decode(String.self, forKey: .userID)
    }
}

// MARK: - RuntimeSupport
extension QONECTIQ_CategoryEventsHandlerInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".CategoryEventsHandlerInput"
    
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "group")
    ]
    
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        var decodedFieldNumbers: Set<Int> = []
        while let fieldNumber = try decoder.nextFieldNumber() {
            decodedFieldNumbers.insert(fieldNumber)
            switch fieldNumber {
            case 1: try {
                try decoder.decodeSingularEnumField(value: &group)
            }()
            default: break
            }
        }
    }
    
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if group != .marketing {
            try visitor.visitSingularEnumField(value: group, fieldNumber: 1)
        }
        
        try unknownFields.traverse(visitor: &visitor)
    }
}

// MARK: - Codable
extension QONECTIQ_CategoryEventsHandlerInput: Codable {
    private enum CodingKeys: String, CodingKey {
        case group
    }
    
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        
        try container.encode(group, forKey: .group)
    }
    
    public init(from decoder: Swift.Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        
        group = try container.decode(QONECTIQ_EventCategoryGroup.self, forKey: .group)
    }
}

// MARK: - RuntimeSupport
extension QONECTIQ_CategoryEventsHandlerResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".CategoryEventsHandlerResponse"
    
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "value")
    ]
    
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        var decodedFieldNumbers: Set<Int> = []
        while let fieldNumber = try decoder.nextFieldNumber() {
            decodedFieldNumbers.insert(fieldNumber)
            switch fieldNumber {
            case 1: try {
                try decoder.decodeRepeatedMessageField(value: &value)
            }()
            default: break
            }
        }
    }
    
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !value.isEmpty {
            try visitor.visitRepeatedMessageField(value: value, fieldNumber: 1)
        }
        
        try unknownFields.traverse(visitor: &visitor)
    }
}

// MARK: - Codable
extension QONECTIQ_CategoryEventsHandlerResponse: Codable {
    private enum CodingKeys: String, CodingKey {
        case value
    }
    
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        
        try container.encode(value, forKey: .value)
    }
    
    public init(from decoder: Swift.Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        
        value = try container.decode([QONECTIQ_Event].self, forKey: .value)
    }
}

// MARK: - RuntimeSupport
extension QONECTIQ_DeleteEventHandlerInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".DeleteEventHandlerInput"
    
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "id")
    ]
    
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        var decodedFieldNumbers: Set<Int> = []
        while let fieldNumber = try decoder.nextFieldNumber() {
            decodedFieldNumbers.insert(fieldNumber)
            switch fieldNumber {
            case 1: try {
                try decoder.decodeSingularStringField(value: &id)
            }()
            default: break
            }
        }
    }
    
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !id.isEmpty {
            try visitor.visitSingularStringField(value: id, fieldNumber: 1)
        }
        
        try unknownFields.traverse(visitor: &visitor)
    }
}

// MARK: - Codable
extension QONECTIQ_DeleteEventHandlerInput: Codable {
    private enum CodingKeys: String, CodingKey {
        case id
    }
    
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        
        try container.encode(id, forKey: .id)
    }
    
    public init(from decoder: Swift.Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        
        id = try container.decode(String.self, forKey: .id)
    }
}

// MARK: - RuntimeSupport
extension QONECTIQ_DeleteUserHandlerInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".DeleteUserHandlerInput"
    
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "userID")
    ]
    
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        var decodedFieldNumbers: Set<Int> = []
        while let fieldNumber = try decoder.nextFieldNumber() {
            decodedFieldNumbers.insert(fieldNumber)
            switch fieldNumber {
            case 1: try {
                try decoder.decodeSingularStringField(value: &userID)
            }()
            default: break
            }
        }
    }
    
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !userID.isEmpty {
            try visitor.visitSingularStringField(value: userID, fieldNumber: 1)
        }
        
        try unknownFields.traverse(visitor: &visitor)
    }
}

// MARK: - Codable
extension QONECTIQ_DeleteUserHandlerInput: Codable {
    private enum CodingKeys: String, CodingKey {
        case userID
    }
    
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        
        try container.encode(userID, forKey: .userID)
    }
    
    public init(from decoder: Swift.Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        
        userID = try container.decode(String.self, forKey: .userID)
    }
}

// MARK: - RuntimeSupport
extension QONECTIQ_Event: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".Event"
    
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "id"),
        2: .same(proto: "title"),
        3: .same(proto: "summary"),
        4: .same(proto: "reviews"),
        5: .same(proto: "date"),
        6: .same(proto: "duration"),
        7: .same(proto: "imagePath"),
        8: .same(proto: "maxParticipants"),
        9: .same(proto: "organizer"),
        10: .same(proto: "tags"),
        11: .same(proto: "category")
    ]
    
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        var decodedFieldNumbers: Set<Int> = []
        while let fieldNumber = try decoder.nextFieldNumber() {
            decodedFieldNumbers.insert(fieldNumber)
            switch fieldNumber {
            case 1: try {
                try decoder.decodeSingularStringField(value: &id)
            }()
            case 2: try {
                try decoder.decodeSingularStringField(value: &title)
            }()
            case 3: try {
                try decoder.decodeSingularStringField(value: &summary)
            }()
            case 4: try {
                try decoder.decodeRepeatedMessageField(value: &reviews)
            }()
            case 5: try {
                try decoder.decodeSingularMessageField(value: &_date)
            }()
            case 6: try {
                try decoder.decodeSingularUInt64Field(value: &duration)
            }()
            case 7: try {
                try decoder.decodeSingularStringField(value: &imagePath)
            }()
            case 8: try {
                try decoder.decodeSingularUInt64Field(value: &_maxParticipants)
            }()
            case 9: try {
                try decoder.decodeSingularStringField(value: &organizer)
            }()
            case 10: try {
                try decoder.decodeRepeatedStringField(value: &tags)
            }()
            case 11: try {
                try decoder.decodeSingularMessageField(value: &_category)
            }()
            default: break
            }
        }
    }
    
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !id.isEmpty {
            try visitor.visitSingularStringField(value: id, fieldNumber: 1)
        }
        if !title.isEmpty {
            try visitor.visitSingularStringField(value: title, fieldNumber: 2)
        }
        if !summary.isEmpty {
            try visitor.visitSingularStringField(value: summary, fieldNumber: 3)
        }
        if !reviews.isEmpty {
            try visitor.visitRepeatedMessageField(value: reviews, fieldNumber: 4)
        }
        try { if let value = _date {
            try visitor.visitSingularMessageField(value: value, fieldNumber: 5)
        } }()
        if duration != 0 {
            try visitor.visitSingularUInt64Field(value: duration, fieldNumber: 6)
        }
        if !imagePath.isEmpty {
            try visitor.visitSingularStringField(value: imagePath, fieldNumber: 7)
        }
        try { if let value = _maxParticipants {
            try visitor.visitSingularUInt64Field(value: value, fieldNumber: 8)
        } }()
        if !organizer.isEmpty {
            try visitor.visitSingularStringField(value: organizer, fieldNumber: 9)
        }
        if !tags.isEmpty {
            try visitor.visitRepeatedStringField(value: tags, fieldNumber: 10)
        }
        try { if let value = _category {
            try visitor.visitSingularMessageField(value: value, fieldNumber: 11)
        } }()
        
        try unknownFields.traverse(visitor: &visitor)
    }
}

// MARK: - Codable
extension QONECTIQ_Event: Codable {
    private enum CodingKeys: String, CodingKey {
        case id
        case title
        case summary
        case reviews
        case date
        case duration
        case imagePath
        case maxParticipants
        case organizer
        case tags
        case category
    }
    
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        
        try container.encode(id, forKey: .id)
        try container.encode(title, forKey: .title)
        try container.encode(summary, forKey: .summary)
        try container.encode(reviews, forKey: .reviews)
        try container.encodeIfPresent(_date, forKey: .date)
        try container.encode(duration, forKey: .duration)
        try container.encode(imagePath, forKey: .imagePath)
        try container.encodeIfPresent(_maxParticipants, forKey: .maxParticipants)
        try container.encode(organizer, forKey: .organizer)
        try container.encode(tags, forKey: .tags)
        try container.encodeIfPresent(_category, forKey: .category)
    }
    
    public init(from decoder: Swift.Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        
        id = try container.decode(String.self, forKey: .id)
        title = try container.decode(String.self, forKey: .title)
        summary = try container.decode(String.self, forKey: .summary)
        reviews = try container.decode([QONECTIQ_Review].self, forKey: .reviews)
        _date = try container.decodeIfPresent(SwiftProtobuf.Google_Protobuf_Timestamp.self, forKey: .date)
        duration = try container.decode(UInt64.self, forKey: .duration)
        imagePath = try container.decode(String.self, forKey: .imagePath)
        _maxParticipants = try container.decodeIfPresent(UInt64.self, forKey: .maxParticipants)
        organizer = try container.decode(String.self, forKey: .organizer)
        tags = try container.decode([String].self, forKey: .tags)
        _category = try container.decodeIfPresent(QONECTIQ_EventCategory.self, forKey: .category)
    }
}

// MARK: - RuntimeSupport
extension QONECTIQ_EventCategory: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".EventCategory"
    
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "id"),
        2: .same(proto: "title"),
        3: .same(proto: "group"),
        4: .same(proto: "status")
    ]
    
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        var decodedFieldNumbers: Set<Int> = []
        while let fieldNumber = try decoder.nextFieldNumber() {
            decodedFieldNumbers.insert(fieldNumber)
            switch fieldNumber {
            case 1: try {
                try decoder.decodeSingularStringField(value: &id)
            }()
            case 2: try {
                try decoder.decodeSingularStringField(value: &title)
            }()
            case 3: try {
                try decoder.decodeSingularEnumField(value: &group)
            }()
            case 4: try {
                try decoder.decodeSingularEnumField(value: &status)
            }()
            default: break
            }
        }
    }
    
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !id.isEmpty {
            try visitor.visitSingularStringField(value: id, fieldNumber: 1)
        }
        if !title.isEmpty {
            try visitor.visitSingularStringField(value: title, fieldNumber: 2)
        }
        if group != .marketing {
            try visitor.visitSingularEnumField(value: group, fieldNumber: 3)
        }
        if status != .available {
            try visitor.visitSingularEnumField(value: status, fieldNumber: 4)
        }
        
        try unknownFields.traverse(visitor: &visitor)
    }
}

// MARK: - Codable
extension QONECTIQ_EventCategory: Codable {
    private enum CodingKeys: String, CodingKey {
        case id
        case title
        case group
        case status
    }
    
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        
        try container.encode(id, forKey: .id)
        try container.encode(title, forKey: .title)
        try container.encode(group, forKey: .group)
        try container.encode(status, forKey: .status)
    }
    
    public init(from decoder: Swift.Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        
        id = try container.decode(String.self, forKey: .id)
        title = try container.decode(String.self, forKey: .title)
        group = try container.decode(QONECTIQ_EventCategoryGroup.self, forKey: .group)
        status = try container.decode(QONECTIQ_CategoryStatus.self, forKey: .status)
    }
}

// MARK: - RuntimeSupport
extension QONECTIQ_EventMediator: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".EventMediator"
    
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "date"),
        2: .same(proto: "duration"),
        3: .same(proto: "maxParticipants")
    ]
    
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        var decodedFieldNumbers: Set<Int> = []
        while let fieldNumber = try decoder.nextFieldNumber() {
            decodedFieldNumbers.insert(fieldNumber)
            switch fieldNumber {
            case 1: try {
                try decoder.decodeSingularMessageField(value: &_date)
            }()
            case 2: try {
                try decoder.decodeSingularUInt64Field(value: &_duration)
            }()
            case 3: try {
                try decoder.decodeSingularUInt64Field(value: &_maxParticipants)
            }()
            default: break
            }
        }
    }
    
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try { if let value = _date {
            try visitor.visitSingularMessageField(value: value, fieldNumber: 1)
        } }()
        try { if let value = _duration {
            try visitor.visitSingularUInt64Field(value: value, fieldNumber: 2)
        } }()
        try { if let value = _maxParticipants {
            try visitor.visitSingularUInt64Field(value: value, fieldNumber: 3)
        } }()
        
        try unknownFields.traverse(visitor: &visitor)
    }
}

// MARK: - Codable
extension QONECTIQ_EventMediator: Codable {
    private enum CodingKeys: String, CodingKey {
        case date
        case duration
        case maxParticipants
    }
    
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        
        try container.encodeIfPresent(_date, forKey: .date)
        try container.encodeIfPresent(_duration, forKey: .duration)
        try container.encodeIfPresent(_maxParticipants, forKey: .maxParticipants)
    }
    
    public init(from decoder: Swift.Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        
        _date = try container.decodeIfPresent(SwiftProtobuf.Google_Protobuf_Timestamp.self, forKey: .date)
        _duration = try container.decodeIfPresent(UInt64.self, forKey: .duration)
        _maxParticipants = try container.decodeIfPresent(UInt64.self, forKey: .maxParticipants)
    }
}

// MARK: - RuntimeSupport
extension QONECTIQ_ExperienceUsersHandlerInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".ExperienceUsersHandlerInput"
    
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "experience")
    ]
    
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        var decodedFieldNumbers: Set<Int> = []
        while let fieldNumber = try decoder.nextFieldNumber() {
            decodedFieldNumbers.insert(fieldNumber)
            switch fieldNumber {
            case 1: try {
                try decoder.decodeSingularEnumField(value: &experience)
            }()
            default: break
            }
        }
    }
    
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if experience != .beginner {
            try visitor.visitSingularEnumField(value: experience, fieldNumber: 1)
        }
        
        try unknownFields.traverse(visitor: &visitor)
    }
}

// MARK: - Codable
extension QONECTIQ_ExperienceUsersHandlerInput: Codable {
    private enum CodingKeys: String, CodingKey {
        case experience
    }
    
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        
        try container.encode(experience, forKey: .experience)
    }
    
    public init(from decoder: Swift.Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        
        experience = try container.decode(QONECTIQ_Experience.self, forKey: .experience)
    }
}

// MARK: - RuntimeSupport
extension QONECTIQ_ExperienceUsersHandlerResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".ExperienceUsersHandlerResponse"
    
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "value")
    ]
    
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        var decodedFieldNumbers: Set<Int> = []
        while let fieldNumber = try decoder.nextFieldNumber() {
            decodedFieldNumbers.insert(fieldNumber)
            switch fieldNumber {
            case 1: try {
                try decoder.decodeRepeatedMessageField(value: &value)
            }()
            default: break
            }
        }
    }
    
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !value.isEmpty {
            try visitor.visitRepeatedMessageField(value: value, fieldNumber: 1)
        }
        
        try unknownFields.traverse(visitor: &visitor)
    }
}

// MARK: - Codable
extension QONECTIQ_ExperienceUsersHandlerResponse: Codable {
    private enum CodingKeys: String, CodingKey {
        case value
    }
    
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        
        try container.encode(value, forKey: .value)
    }
    
    public init(from decoder: Swift.Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        
        value = try container.decode([QONECTIQ_User].self, forKey: .value)
    }
}

// MARK: - RuntimeSupport
extension QONECTIQ_GetAllUsersHandlerResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".GetAllUsersHandlerResponse"
    
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "value")
    ]
    
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        var decodedFieldNumbers: Set<Int> = []
        while let fieldNumber = try decoder.nextFieldNumber() {
            decodedFieldNumbers.insert(fieldNumber)
            switch fieldNumber {
            case 1: try {
                try decoder.decodeRepeatedMessageField(value: &value)
            }()
            default: break
            }
        }
    }
    
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !value.isEmpty {
            try visitor.visitRepeatedMessageField(value: value, fieldNumber: 1)
        }
        
        try unknownFields.traverse(visitor: &visitor)
    }
}

// MARK: - Codable
extension QONECTIQ_GetAllUsersHandlerResponse: Codable {
    private enum CodingKeys: String, CodingKey {
        case value
    }
    
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        
        try container.encode(value, forKey: .value)
    }
    
    public init(from decoder: Swift.Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        
        value = try container.decode([QONECTIQ_User].self, forKey: .value)
    }
}

// MARK: - RuntimeSupport
extension QONECTIQ_GetCategoriesHandlerResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".GetCategoriesHandlerResponse"
    
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "value")
    ]
    
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        var decodedFieldNumbers: Set<Int> = []
        while let fieldNumber = try decoder.nextFieldNumber() {
            decodedFieldNumbers.insert(fieldNumber)
            switch fieldNumber {
            case 1: try {
                try decoder.decodeRepeatedMessageField(value: &value)
            }()
            default: break
            }
        }
    }
    
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !value.isEmpty {
            try visitor.visitRepeatedMessageField(value: value, fieldNumber: 1)
        }
        
        try unknownFields.traverse(visitor: &visitor)
    }
}

// MARK: - Codable
extension QONECTIQ_GetCategoriesHandlerResponse: Codable {
    private enum CodingKeys: String, CodingKey {
        case value
    }
    
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        
        try container.encode(value, forKey: .value)
    }
    
    public init(from decoder: Swift.Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        
        value = try container.decode([QONECTIQ_EventCategory].self, forKey: .value)
    }
}

// MARK: - RuntimeSupport
extension QONECTIQ_GetCategoryHandlerInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".GetCategoryHandlerInput"
    
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "id")
    ]
    
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        var decodedFieldNumbers: Set<Int> = []
        while let fieldNumber = try decoder.nextFieldNumber() {
            decodedFieldNumbers.insert(fieldNumber)
            switch fieldNumber {
            case 1: try {
                try decoder.decodeSingularStringField(value: &id)
            }()
            default: break
            }
        }
    }
    
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !id.isEmpty {
            try visitor.visitSingularStringField(value: id, fieldNumber: 1)
        }
        
        try unknownFields.traverse(visitor: &visitor)
    }
}

// MARK: - Codable
extension QONECTIQ_GetCategoryHandlerInput: Codable {
    private enum CodingKeys: String, CodingKey {
        case id
    }
    
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        
        try container.encode(id, forKey: .id)
    }
    
    public init(from decoder: Swift.Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        
        id = try container.decode(String.self, forKey: .id)
    }
}

// MARK: - RuntimeSupport
extension QONECTIQ_GetEventHandlerInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".GetEventHandlerInput"
    
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "id")
    ]
    
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        var decodedFieldNumbers: Set<Int> = []
        while let fieldNumber = try decoder.nextFieldNumber() {
            decodedFieldNumbers.insert(fieldNumber)
            switch fieldNumber {
            case 1: try {
                try decoder.decodeSingularStringField(value: &id)
            }()
            default: break
            }
        }
    }
    
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !id.isEmpty {
            try visitor.visitSingularStringField(value: id, fieldNumber: 1)
        }
        
        try unknownFields.traverse(visitor: &visitor)
    }
}

// MARK: - Codable
extension QONECTIQ_GetEventHandlerInput: Codable {
    private enum CodingKeys: String, CodingKey {
        case id
    }
    
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        
        try container.encode(id, forKey: .id)
    }
    
    public init(from decoder: Swift.Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        
        id = try container.decode(String.self, forKey: .id)
    }
}

// MARK: - RuntimeSupport
extension QONECTIQ_GetEventsHandlerResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".GetEventsHandlerResponse"
    
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "value")
    ]
    
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        var decodedFieldNumbers: Set<Int> = []
        while let fieldNumber = try decoder.nextFieldNumber() {
            decodedFieldNumbers.insert(fieldNumber)
            switch fieldNumber {
            case 1: try {
                try decoder.decodeRepeatedMessageField(value: &value)
            }()
            default: break
            }
        }
    }
    
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !value.isEmpty {
            try visitor.visitRepeatedMessageField(value: value, fieldNumber: 1)
        }
        
        try unknownFields.traverse(visitor: &visitor)
    }
}

// MARK: - Codable
extension QONECTIQ_GetEventsHandlerResponse: Codable {
    private enum CodingKeys: String, CodingKey {
        case value
    }
    
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        
        try container.encode(value, forKey: .value)
    }
    
    public init(from decoder: Swift.Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        
        value = try container.decode([QONECTIQ_Event].self, forKey: .value)
    }
}

// MARK: - RuntimeSupport
extension QONECTIQ_GetParticipantsOfEventHandlerInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".GetParticipantsOfEventHandlerInput"
    
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "eventID")
    ]
    
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        var decodedFieldNumbers: Set<Int> = []
        while let fieldNumber = try decoder.nextFieldNumber() {
            decodedFieldNumbers.insert(fieldNumber)
            switch fieldNumber {
            case 1: try {
                try decoder.decodeSingularStringField(value: &eventID)
            }()
            default: break
            }
        }
    }
    
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !eventID.isEmpty {
            try visitor.visitSingularStringField(value: eventID, fieldNumber: 1)
        }
        
        try unknownFields.traverse(visitor: &visitor)
    }
}

// MARK: - Codable
extension QONECTIQ_GetParticipantsOfEventHandlerInput: Codable {
    private enum CodingKeys: String, CodingKey {
        case eventID
    }
    
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        
        try container.encode(eventID, forKey: .eventID)
    }
    
    public init(from decoder: Swift.Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        
        eventID = try container.decode(String.self, forKey: .eventID)
    }
}

// MARK: - RuntimeSupport
extension QONECTIQ_GetParticipantsOfEventHandlerResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".GetParticipantsOfEventHandlerResponse"
    
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "value")
    ]
    
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        var decodedFieldNumbers: Set<Int> = []
        while let fieldNumber = try decoder.nextFieldNumber() {
            decodedFieldNumbers.insert(fieldNumber)
            switch fieldNumber {
            case 1: try {
                try decoder.decodeRepeatedMessageField(value: &value)
            }()
            default: break
            }
        }
    }
    
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !value.isEmpty {
            try visitor.visitRepeatedMessageField(value: value, fieldNumber: 1)
        }
        
        try unknownFields.traverse(visitor: &visitor)
    }
}

// MARK: - Codable
extension QONECTIQ_GetParticipantsOfEventHandlerResponse: Codable {
    private enum CodingKeys: String, CodingKey {
        case value
    }
    
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        
        try container.encode(value, forKey: .value)
    }
    
    public init(from decoder: Swift.Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        
        value = try container.decode([QONECTIQ_User].self, forKey: .value)
    }
}

// MARK: - RuntimeSupport
extension QONECTIQ_GetUserHandlerInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".GetUserHandlerInput"
    
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "userID")
    ]
    
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        var decodedFieldNumbers: Set<Int> = []
        while let fieldNumber = try decoder.nextFieldNumber() {
            decodedFieldNumbers.insert(fieldNumber)
            switch fieldNumber {
            case 1: try {
                try decoder.decodeSingularStringField(value: &userID)
            }()
            default: break
            }
        }
    }
    
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !userID.isEmpty {
            try visitor.visitSingularStringField(value: userID, fieldNumber: 1)
        }
        
        try unknownFields.traverse(visitor: &visitor)
    }
}

// MARK: - Codable
extension QONECTIQ_GetUserHandlerInput: Codable {
    private enum CodingKeys: String, CodingKey {
        case userID
    }
    
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        
        try container.encode(userID, forKey: .userID)
    }
    
    public init(from decoder: Swift.Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        
        userID = try container.decode(String.self, forKey: .userID)
    }
}

// MARK: - RuntimeSupport
extension QONECTIQ_GroupCategoriesHandlerInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".GroupCategoriesHandlerInput"
    
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "groupCategory")
    ]
    
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        var decodedFieldNumbers: Set<Int> = []
        while let fieldNumber = try decoder.nextFieldNumber() {
            decodedFieldNumbers.insert(fieldNumber)
            switch fieldNumber {
            case 1: try {
                try decoder.decodeSingularEnumField(value: &groupCategory)
            }()
            default: break
            }
        }
    }
    
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if groupCategory != .marketing {
            try visitor.visitSingularEnumField(value: groupCategory, fieldNumber: 1)
        }
        
        try unknownFields.traverse(visitor: &visitor)
    }
}

// MARK: - Codable
extension QONECTIQ_GroupCategoriesHandlerInput: Codable {
    private enum CodingKeys: String, CodingKey {
        case groupCategory
    }
    
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        
        try container.encode(groupCategory, forKey: .groupCategory)
    }
    
    public init(from decoder: Swift.Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        
        groupCategory = try container.decode(QONECTIQ_EventCategoryGroup.self, forKey: .groupCategory)
    }
}

// MARK: - RuntimeSupport
extension QONECTIQ_GroupCategoriesHandlerResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".GroupCategoriesHandlerResponse"
    
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "value")
    ]
    
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        var decodedFieldNumbers: Set<Int> = []
        while let fieldNumber = try decoder.nextFieldNumber() {
            decodedFieldNumbers.insert(fieldNumber)
            switch fieldNumber {
            case 1: try {
                try decoder.decodeRepeatedMessageField(value: &value)
            }()
            default: break
            }
        }
    }
    
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !value.isEmpty {
            try visitor.visitRepeatedMessageField(value: value, fieldNumber: 1)
        }
        
        try unknownFields.traverse(visitor: &visitor)
    }
}

// MARK: - Codable
extension QONECTIQ_GroupCategoriesHandlerResponse: Codable {
    private enum CodingKeys: String, CodingKey {
        case value
    }
    
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        
        try container.encode(value, forKey: .value)
    }
    
    public init(from decoder: Swift.Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        
        value = try container.decode([QONECTIQ_EventCategory].self, forKey: .value)
    }
}

// MARK: - RuntimeSupport
extension QONECTIQ_HomeFeed: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".HomeFeed"
    
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "id"),
        2: .same(proto: "userID"),
        3: .same(proto: "greeting"),
        4: .same(proto: "subtitle"),
        5: .same(proto: "searchBarText"),
        6: .same(proto: "events"),
        7: .same(proto: "categories")
    ]
    
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        var decodedFieldNumbers: Set<Int> = []
        while let fieldNumber = try decoder.nextFieldNumber() {
            decodedFieldNumbers.insert(fieldNumber)
            switch fieldNumber {
            case 1: try {
                try decoder.decodeSingularStringField(value: &id)
            }()
            case 2: try {
                try decoder.decodeSingularStringField(value: &userID)
            }()
            case 3: try {
                try decoder.decodeSingularStringField(value: &greeting)
            }()
            case 4: try {
                try decoder.decodeSingularStringField(value: &subtitle)
            }()
            case 5: try {
                try decoder.decodeSingularStringField(value: &searchBarText)
            }()
            case 6: try {
                try decoder.decodeRepeatedMessageField(value: &events)
            }()
            case 7: try {
                try decoder.decodeRepeatedMessageField(value: &categories)
            }()
            default: break
            }
        }
    }
    
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !id.isEmpty {
            try visitor.visitSingularStringField(value: id, fieldNumber: 1)
        }
        if !userID.isEmpty {
            try visitor.visitSingularStringField(value: userID, fieldNumber: 2)
        }
        if !greeting.isEmpty {
            try visitor.visitSingularStringField(value: greeting, fieldNumber: 3)
        }
        if !subtitle.isEmpty {
            try visitor.visitSingularStringField(value: subtitle, fieldNumber: 4)
        }
        if !searchBarText.isEmpty {
            try visitor.visitSingularStringField(value: searchBarText, fieldNumber: 5)
        }
        if !events.isEmpty {
            try visitor.visitRepeatedMessageField(value: events, fieldNumber: 6)
        }
        if !categories.isEmpty {
            try visitor.visitRepeatedMessageField(value: categories, fieldNumber: 7)
        }
        
        try unknownFields.traverse(visitor: &visitor)
    }
}

// MARK: - Codable
extension QONECTIQ_HomeFeed: Codable {
    private enum CodingKeys: String, CodingKey {
        case id
        case userID
        case greeting
        case subtitle
        case searchBarText
        case events
        case categories
    }
    
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        
        try container.encode(id, forKey: .id)
        try container.encode(userID, forKey: .userID)
        try container.encode(greeting, forKey: .greeting)
        try container.encode(subtitle, forKey: .subtitle)
        try container.encode(searchBarText, forKey: .searchBarText)
        try container.encode(events, forKey: .events)
        try container.encode(categories, forKey: .categories)
    }
    
    public init(from decoder: Swift.Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        
        id = try container.decode(String.self, forKey: .id)
        userID = try container.decode(String.self, forKey: .userID)
        greeting = try container.decode(String.self, forKey: .greeting)
        subtitle = try container.decode(String.self, forKey: .subtitle)
        searchBarText = try container.decode(String.self, forKey: .searchBarText)
        events = try container.decode([QONECTIQ_HomeFeedEvent].self, forKey: .events)
        categories = try container.decode([QONECTIQ_HomeFeedCategory].self, forKey: .categories)
    }
}

// MARK: - RuntimeSupport
extension QONECTIQ_HomeFeedCategory: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".HomeFeedCategory"
    
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "categoryID"),
        2: .same(proto: "title"),
        3: .same(proto: "imageURL"),
        4: .same(proto: "eventsCount")
    ]
    
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        var decodedFieldNumbers: Set<Int> = []
        while let fieldNumber = try decoder.nextFieldNumber() {
            decodedFieldNumbers.insert(fieldNumber)
            switch fieldNumber {
            case 1: try {
                try decoder.decodeSingularStringField(value: &categoryID)
            }()
            case 2: try {
                try decoder.decodeSingularStringField(value: &title)
            }()
            case 3: try {
                try decoder.decodeSingularStringField(value: &imageURL)
            }()
            case 4: try {
                try decoder.decodeSingularUInt64Field(value: &eventsCount)
            }()
            default: break
            }
        }
    }
    
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !categoryID.isEmpty {
            try visitor.visitSingularStringField(value: categoryID, fieldNumber: 1)
        }
        if !title.isEmpty {
            try visitor.visitSingularStringField(value: title, fieldNumber: 2)
        }
        if !imageURL.isEmpty {
            try visitor.visitSingularStringField(value: imageURL, fieldNumber: 3)
        }
        if eventsCount != 0 {
            try visitor.visitSingularUInt64Field(value: eventsCount, fieldNumber: 4)
        }
        
        try unknownFields.traverse(visitor: &visitor)
    }
}

// MARK: - Codable
extension QONECTIQ_HomeFeedCategory: Codable {
    private enum CodingKeys: String, CodingKey {
        case categoryID
        case title
        case imageURL
        case eventsCount
    }
    
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        
        try container.encode(categoryID, forKey: .categoryID)
        try container.encode(title, forKey: .title)
        try container.encode(imageURL, forKey: .imageURL)
        try container.encode(eventsCount, forKey: .eventsCount)
    }
    
    public init(from decoder: Swift.Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        
        categoryID = try container.decode(String.self, forKey: .categoryID)
        title = try container.decode(String.self, forKey: .title)
        imageURL = try container.decode(String.self, forKey: .imageURL)
        eventsCount = try container.decode(UInt64.self, forKey: .eventsCount)
    }
}

// MARK: - RuntimeSupport
extension QONECTIQ_HomeFeedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".HomeFeedEvent"
    
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "eventID"),
        2: .same(proto: "title"),
        3: .same(proto: "subtitle"),
        4: .same(proto: "imageURL"),
        5: .same(proto: "eventsCount")
    ]
    
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        var decodedFieldNumbers: Set<Int> = []
        while let fieldNumber = try decoder.nextFieldNumber() {
            decodedFieldNumbers.insert(fieldNumber)
            switch fieldNumber {
            case 1: try {
                try decoder.decodeSingularStringField(value: &eventID)
            }()
            case 2: try {
                try decoder.decodeSingularStringField(value: &title)
            }()
            case 3: try {
                try decoder.decodeSingularStringField(value: &subtitle)
            }()
            case 4: try {
                try decoder.decodeSingularStringField(value: &imageURL)
            }()
            case 5: try {
                try decoder.decodeSingularUInt64Field(value: &eventsCount)
            }()
            default: break
            }
        }
    }
    
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !eventID.isEmpty {
            try visitor.visitSingularStringField(value: eventID, fieldNumber: 1)
        }
        if !title.isEmpty {
            try visitor.visitSingularStringField(value: title, fieldNumber: 2)
        }
        if !subtitle.isEmpty {
            try visitor.visitSingularStringField(value: subtitle, fieldNumber: 3)
        }
        if !imageURL.isEmpty {
            try visitor.visitSingularStringField(value: imageURL, fieldNumber: 4)
        }
        if eventsCount != 0 {
            try visitor.visitSingularUInt64Field(value: eventsCount, fieldNumber: 5)
        }
        
        try unknownFields.traverse(visitor: &visitor)
    }
}

// MARK: - Codable
extension QONECTIQ_HomeFeedEvent: Codable {
    private enum CodingKeys: String, CodingKey {
        case eventID
        case title
        case subtitle
        case imageURL
        case eventsCount
    }
    
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        
        try container.encode(eventID, forKey: .eventID)
        try container.encode(title, forKey: .title)
        try container.encode(subtitle, forKey: .subtitle)
        try container.encode(imageURL, forKey: .imageURL)
        try container.encode(eventsCount, forKey: .eventsCount)
    }
    
    public init(from decoder: Swift.Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        
        eventID = try container.decode(String.self, forKey: .eventID)
        title = try container.decode(String.self, forKey: .title)
        subtitle = try container.decode(String.self, forKey: .subtitle)
        imageURL = try container.decode(String.self, forKey: .imageURL)
        eventsCount = try container.decode(UInt64.self, forKey: .eventsCount)
    }
}

// MARK: - RuntimeSupport
extension QONECTIQ_HomeFeedHandlerInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".HomeFeedHandlerInput"
    
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "userID")
    ]
    
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        var decodedFieldNumbers: Set<Int> = []
        while let fieldNumber = try decoder.nextFieldNumber() {
            decodedFieldNumbers.insert(fieldNumber)
            switch fieldNumber {
            case 1: try {
                try decoder.decodeSingularStringField(value: &userID)
            }()
            default: break
            }
        }
    }
    
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !userID.isEmpty {
            try visitor.visitSingularStringField(value: userID, fieldNumber: 1)
        }
        
        try unknownFields.traverse(visitor: &visitor)
    }
}

// MARK: - Codable
extension QONECTIQ_HomeFeedHandlerInput: Codable {
    private enum CodingKeys: String, CodingKey {
        case userID
    }
    
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        
        try container.encode(userID, forKey: .userID)
    }
    
    public init(from decoder: Swift.Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        
        userID = try container.decode(String.self, forKey: .userID)
    }
}

// MARK: - RuntimeSupport
extension QONECTIQ_Review: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".Review"
    
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "id"),
        2: .same(proto: "title"),
        3: .same(proto: "content"),
        4: .same(proto: "eventID"),
        5: .same(proto: "reviewerID"),
        6: .same(proto: "summary"),
        7: .same(proto: "rating")
    ]
    
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        var decodedFieldNumbers: Set<Int> = []
        while let fieldNumber = try decoder.nextFieldNumber() {
            decodedFieldNumbers.insert(fieldNumber)
            switch fieldNumber {
            case 1: try {
                try decoder.decodeSingularStringField(value: &id)
            }()
            case 2: try {
                try decoder.decodeSingularStringField(value: &title)
            }()
            case 3: try {
                try decoder.decodeSingularStringField(value: &content)
            }()
            case 4: try {
                try decoder.decodeSingularStringField(value: &eventID)
            }()
            case 5: try {
                try decoder.decodeSingularStringField(value: &reviewerID)
            }()
            case 6: try {
                try decoder.decodeSingularStringField(value: &summary)
            }()
            case 7: try {
                try decoder.decodeSingularEnumField(value: &rating)
            }()
            default: break
            }
        }
    }
    
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !id.isEmpty {
            try visitor.visitSingularStringField(value: id, fieldNumber: 1)
        }
        if !title.isEmpty {
            try visitor.visitSingularStringField(value: title, fieldNumber: 2)
        }
        if !content.isEmpty {
            try visitor.visitSingularStringField(value: content, fieldNumber: 3)
        }
        if !eventID.isEmpty {
            try visitor.visitSingularStringField(value: eventID, fieldNumber: 4)
        }
        if !reviewerID.isEmpty {
            try visitor.visitSingularStringField(value: reviewerID, fieldNumber: 5)
        }
        if !summary.isEmpty {
            try visitor.visitSingularStringField(value: summary, fieldNumber: 6)
        }
        if rating != .outstanding {
            try visitor.visitSingularEnumField(value: rating, fieldNumber: 7)
        }
        
        try unknownFields.traverse(visitor: &visitor)
    }
}

// MARK: - Codable
extension QONECTIQ_Review: Codable {
    private enum CodingKeys: String, CodingKey {
        case id
        case title
        case content
        case eventID
        case reviewerID
        case summary
        case rating
    }
    
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        
        try container.encode(id, forKey: .id)
        try container.encode(title, forKey: .title)
        try container.encode(content, forKey: .content)
        try container.encode(eventID, forKey: .eventID)
        try container.encode(reviewerID, forKey: .reviewerID)
        try container.encode(summary, forKey: .summary)
        try container.encode(rating, forKey: .rating)
    }
    
    public init(from decoder: Swift.Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        
        id = try container.decode(String.self, forKey: .id)
        title = try container.decode(String.self, forKey: .title)
        content = try container.decode(String.self, forKey: .content)
        eventID = try container.decode(String.self, forKey: .eventID)
        reviewerID = try container.decode(String.self, forKey: .reviewerID)
        summary = try container.decode(String.self, forKey: .summary)
        rating = try container.decode(QONECTIQ_Rating.self, forKey: .rating)
    }
}

// MARK: - RuntimeSupport
extension QONECTIQ_ReviewForm: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".ReviewForm"
    
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "title"),
        2: .same(proto: "content"),
        3: .same(proto: "summary"),
        4: .same(proto: "rating")
    ]
    
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        var decodedFieldNumbers: Set<Int> = []
        while let fieldNumber = try decoder.nextFieldNumber() {
            decodedFieldNumbers.insert(fieldNumber)
            switch fieldNumber {
            case 1: try {
                try decoder.decodeSingularStringField(value: &title)
            }()
            case 2: try {
                try decoder.decodeSingularStringField(value: &content)
            }()
            case 3: try {
                try decoder.decodeSingularStringField(value: &summary)
            }()
            case 4: try {
                try decoder.decodeSingularEnumField(value: &rating)
            }()
            default: break
            }
        }
    }
    
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !title.isEmpty {
            try visitor.visitSingularStringField(value: title, fieldNumber: 1)
        }
        if !content.isEmpty {
            try visitor.visitSingularStringField(value: content, fieldNumber: 2)
        }
        if !summary.isEmpty {
            try visitor.visitSingularStringField(value: summary, fieldNumber: 3)
        }
        if rating != .outstanding {
            try visitor.visitSingularEnumField(value: rating, fieldNumber: 4)
        }
        
        try unknownFields.traverse(visitor: &visitor)
    }
}

// MARK: - Codable
extension QONECTIQ_ReviewForm: Codable {
    private enum CodingKeys: String, CodingKey {
        case title
        case content
        case summary
        case rating
    }
    
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        
        try container.encode(title, forKey: .title)
        try container.encode(content, forKey: .content)
        try container.encode(summary, forKey: .summary)
        try container.encode(rating, forKey: .rating)
    }
    
    public init(from decoder: Swift.Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        
        title = try container.decode(String.self, forKey: .title)
        content = try container.decode(String.self, forKey: .content)
        summary = try container.decode(String.self, forKey: .summary)
        rating = try container.decode(QONECTIQ_Rating.self, forKey: .rating)
    }
}

// MARK: - RuntimeSupport
extension QONECTIQ_ReviewsHandlerInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".ReviewsHandlerInput"
    
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "eventID")
    ]
    
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        var decodedFieldNumbers: Set<Int> = []
        while let fieldNumber = try decoder.nextFieldNumber() {
            decodedFieldNumbers.insert(fieldNumber)
            switch fieldNumber {
            case 1: try {
                try decoder.decodeSingularStringField(value: &eventID)
            }()
            default: break
            }
        }
    }
    
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !eventID.isEmpty {
            try visitor.visitSingularStringField(value: eventID, fieldNumber: 1)
        }
        
        try unknownFields.traverse(visitor: &visitor)
    }
}

// MARK: - Codable
extension QONECTIQ_ReviewsHandlerInput: Codable {
    private enum CodingKeys: String, CodingKey {
        case eventID
    }
    
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        
        try container.encode(eventID, forKey: .eventID)
    }
    
    public init(from decoder: Swift.Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        
        eventID = try container.decode(String.self, forKey: .eventID)
    }
}

// MARK: - RuntimeSupport
extension QONECTIQ_ReviewsHandlerResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".ReviewsHandlerResponse"
    
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "value")
    ]
    
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        var decodedFieldNumbers: Set<Int> = []
        while let fieldNumber = try decoder.nextFieldNumber() {
            decodedFieldNumbers.insert(fieldNumber)
            switch fieldNumber {
            case 1: try {
                try decoder.decodeRepeatedMessageField(value: &value)
            }()
            default: break
            }
        }
    }
    
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !value.isEmpty {
            try visitor.visitRepeatedMessageField(value: value, fieldNumber: 1)
        }
        
        try unknownFields.traverse(visitor: &visitor)
    }
}

// MARK: - Codable
extension QONECTIQ_ReviewsHandlerResponse: Codable {
    private enum CodingKeys: String, CodingKey {
        case value
    }
    
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        
        try container.encode(value, forKey: .value)
    }
    
    public init(from decoder: Swift.Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        
        value = try container.decode([QONECTIQ_Review].self, forKey: .value)
    }
}

// MARK: - RuntimeSupport
extension QONECTIQ_UpdateEventHandlerInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".UpdateEventHandlerInput"
    
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "eventMediator"),
        2: .same(proto: "eventID")
    ]
    
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        var decodedFieldNumbers: Set<Int> = []
        while let fieldNumber = try decoder.nextFieldNumber() {
            decodedFieldNumbers.insert(fieldNumber)
            switch fieldNumber {
            case 1: try {
                try decoder.decodeSingularMessageField(value: &_eventMediator)
            }()
            case 2: try {
                try decoder.decodeSingularStringField(value: &eventID)
            }()
            default: break
            }
        }
    }
    
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try { if let value = _eventMediator {
            try visitor.visitSingularMessageField(value: value, fieldNumber: 1)
        } }()
        if !eventID.isEmpty {
            try visitor.visitSingularStringField(value: eventID, fieldNumber: 2)
        }
        
        try unknownFields.traverse(visitor: &visitor)
    }
}

// MARK: - Codable
extension QONECTIQ_UpdateEventHandlerInput: Codable {
    private enum CodingKeys: String, CodingKey {
        case eventMediator
        case eventID
    }
    
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        
        try container.encodeIfPresent(_eventMediator, forKey: .eventMediator)
        try container.encode(eventID, forKey: .eventID)
    }
    
    public init(from decoder: Swift.Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        
        _eventMediator = try container.decodeIfPresent(QONECTIQ_EventMediator.self, forKey: .eventMediator)
        eventID = try container.decode(String.self, forKey: .eventID)
    }
}

// MARK: - RuntimeSupport
extension QONECTIQ_User: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".User"
    
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "id"),
        2: .same(proto: "name"),
        3: .same(proto: "surname"),
        4: .same(proto: "password"),
        5: .same(proto: "email"),
        6: .same(proto: "birthday"),
        7: .same(proto: "subscribedToNewsLetter"),
        8: .same(proto: "experience"),
        9: .same(proto: "reviews"),
        10: .same(proto: "ownEvents"),
        11: .same(proto: "participatingEvents"),
        12: .same(proto: "eventsOfInterest"),
        13: .same(proto: "homeFeed")
    ]
    
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        var decodedFieldNumbers: Set<Int> = []
        while let fieldNumber = try decoder.nextFieldNumber() {
            decodedFieldNumbers.insert(fieldNumber)
            switch fieldNumber {
            case 1: try {
                try decoder.decodeSingularStringField(value: &id)
            }()
            case 2: try {
                try decoder.decodeSingularStringField(value: &name)
            }()
            case 3: try {
                try decoder.decodeSingularStringField(value: &surname)
            }()
            case 4: try {
                try decoder.decodeSingularStringField(value: &password)
            }()
            case 5: try {
                try decoder.decodeSingularStringField(value: &email)
            }()
            case 6: try {
                try decoder.decodeSingularMessageField(value: &_birthday)
            }()
            case 7: try {
                try decoder.decodeSingularBoolField(value: &subscribedToNewsLetter)
            }()
            case 8: try {
                try decoder.decodeSingularEnumField(value: &experience)
            }()
            case 9: try {
                try decoder.decodeRepeatedMessageField(value: &reviews)
            }()
            case 10: try {
                try decoder.decodeRepeatedMessageField(value: &ownEvents)
            }()
            case 11: try {
                try decoder.decodeRepeatedMessageField(value: &participatingEvents)
            }()
            case 12: try {
                try decoder.decodeRepeatedMessageField(value: &eventsOfInterest)
            }()
            case 13: try {
                try decoder.decodeSingularMessageField(value: &_homeFeed)
            }()
            default: break
            }
        }
    }
    
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !id.isEmpty {
            try visitor.visitSingularStringField(value: id, fieldNumber: 1)
        }
        if !name.isEmpty {
            try visitor.visitSingularStringField(value: name, fieldNumber: 2)
        }
        if !surname.isEmpty {
            try visitor.visitSingularStringField(value: surname, fieldNumber: 3)
        }
        if !password.isEmpty {
            try visitor.visitSingularStringField(value: password, fieldNumber: 4)
        }
        if !email.isEmpty {
            try visitor.visitSingularStringField(value: email, fieldNumber: 5)
        }
        try { if let value = _birthday {
            try visitor.visitSingularMessageField(value: value, fieldNumber: 6)
        } }()
        if subscribedToNewsLetter != false {
            try visitor.visitSingularBoolField(value: subscribedToNewsLetter, fieldNumber: 7)
        }
        if experience != .beginner {
            try visitor.visitSingularEnumField(value: experience, fieldNumber: 8)
        }
        if !reviews.isEmpty {
            try visitor.visitRepeatedMessageField(value: reviews, fieldNumber: 9)
        }
        if !ownEvents.isEmpty {
            try visitor.visitRepeatedMessageField(value: ownEvents, fieldNumber: 10)
        }
        if !participatingEvents.isEmpty {
            try visitor.visitRepeatedMessageField(value: participatingEvents, fieldNumber: 11)
        }
        if !eventsOfInterest.isEmpty {
            try visitor.visitRepeatedMessageField(value: eventsOfInterest, fieldNumber: 12)
        }
        try { if let value = _homeFeed {
            try visitor.visitSingularMessageField(value: value, fieldNumber: 13)
        } }()
        
        try unknownFields.traverse(visitor: &visitor)
    }
}

// MARK: - Codable
extension QONECTIQ_User: Codable {
    private enum CodingKeys: String, CodingKey {
        case id
        case name
        case surname
        case password
        case email
        case birthday
        case subscribedToNewsLetter
        case experience
        case reviews
        case ownEvents
        case participatingEvents
        case eventsOfInterest
        case homeFeed
    }
    
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        
        try container.encode(id, forKey: .id)
        try container.encode(name, forKey: .name)
        try container.encode(surname, forKey: .surname)
        try container.encode(password, forKey: .password)
        try container.encode(email, forKey: .email)
        try container.encodeIfPresent(_birthday, forKey: .birthday)
        try container.encode(subscribedToNewsLetter, forKey: .subscribedToNewsLetter)
        try container.encode(experience, forKey: .experience)
        try container.encode(reviews, forKey: .reviews)
        try container.encode(ownEvents, forKey: .ownEvents)
        try container.encode(participatingEvents, forKey: .participatingEvents)
        try container.encode(eventsOfInterest, forKey: .eventsOfInterest)
        try container.encodeIfPresent(_homeFeed, forKey: .homeFeed)
    }
    
    public init(from decoder: Swift.Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        
        id = try container.decode(String.self, forKey: .id)
        name = try container.decode(String.self, forKey: .name)
        surname = try container.decode(String.self, forKey: .surname)
        password = try container.decode(String.self, forKey: .password)
        email = try container.decode(String.self, forKey: .email)
        _birthday = try container.decodeIfPresent(SwiftProtobuf.Google_Protobuf_Timestamp.self, forKey: .birthday)
        subscribedToNewsLetter = try container.decode(Bool.self, forKey: .subscribedToNewsLetter)
        experience = try container.decode(QONECTIQ_Experience.self, forKey: .experience)
        reviews = try container.decode([QONECTIQ_Review].self, forKey: .reviews)
        ownEvents = try container.decode([QONECTIQ_Event].self, forKey: .ownEvents)
        participatingEvents = try container.decode([QONECTIQ_Event].self, forKey: .participatingEvents)
        eventsOfInterest = try container.decode([QONECTIQ_Event].self, forKey: .eventsOfInterest)
        _homeFeed = try container.decodeIfPresent(QONECTIQ_HomeFeed.self, forKey: .homeFeed)
    }
}

// MARK: - RuntimeSupport
extension QONECTIQ_UserLogin: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".UserLogin"
    
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "userName"),
        2: .same(proto: "password")
    ]
    
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        var decodedFieldNumbers: Set<Int> = []
        while let fieldNumber = try decoder.nextFieldNumber() {
            decodedFieldNumbers.insert(fieldNumber)
            switch fieldNumber {
            case 1: try {
                try decoder.decodeSingularStringField(value: &userName)
            }()
            case 2: try {
                try decoder.decodeSingularStringField(value: &password)
            }()
            default: break
            }
        }
    }
    
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !userName.isEmpty {
            try visitor.visitSingularStringField(value: userName, fieldNumber: 1)
        }
        if !password.isEmpty {
            try visitor.visitSingularStringField(value: password, fieldNumber: 2)
        }
        
        try unknownFields.traverse(visitor: &visitor)
    }
}

// MARK: - Codable
extension QONECTIQ_UserLogin: Codable {
    private enum CodingKeys: String, CodingKey {
        case userName
        case password
    }
    
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        
        try container.encode(userName, forKey: .userName)
        try container.encode(password, forKey: .password)
    }
    
    public init(from decoder: Swift.Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        
        userName = try container.decode(String.self, forKey: .userName)
        password = try container.decode(String.self, forKey: .password)
    }
}

// MARK: - RuntimeSupport
extension QONECTIQ_UserRegisterForm: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".UserRegisterForm"
    
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "name"),
        2: .same(proto: "surname"),
        3: .same(proto: "password"),
        4: .same(proto: "birthday"),
        5: .same(proto: "email"),
        6: .same(proto: "subscribedToNewsLetter")
    ]
    
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        var decodedFieldNumbers: Set<Int> = []
        while let fieldNumber = try decoder.nextFieldNumber() {
            decodedFieldNumbers.insert(fieldNumber)
            switch fieldNumber {
            case 1: try {
                try decoder.decodeSingularStringField(value: &name)
            }()
            case 2: try {
                try decoder.decodeSingularStringField(value: &surname)
            }()
            case 3: try {
                try decoder.decodeSingularStringField(value: &password)
            }()
            case 4: try {
                try decoder.decodeSingularMessageField(value: &_birthday)
            }()
            case 5: try {
                try decoder.decodeSingularStringField(value: &email)
            }()
            case 6: try {
                try decoder.decodeSingularBoolField(value: &subscribedToNewsLetter)
            }()
            default: break
            }
        }
    }
    
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !name.isEmpty {
            try visitor.visitSingularStringField(value: name, fieldNumber: 1)
        }
        if !surname.isEmpty {
            try visitor.visitSingularStringField(value: surname, fieldNumber: 2)
        }
        if !password.isEmpty {
            try visitor.visitSingularStringField(value: password, fieldNumber: 3)
        }
        try { if let value = _birthday {
            try visitor.visitSingularMessageField(value: value, fieldNumber: 4)
        } }()
        if !email.isEmpty {
            try visitor.visitSingularStringField(value: email, fieldNumber: 5)
        }
        if subscribedToNewsLetter != false {
            try visitor.visitSingularBoolField(value: subscribedToNewsLetter, fieldNumber: 6)
        }
        
        try unknownFields.traverse(visitor: &visitor)
    }
}

// MARK: - Codable
extension QONECTIQ_UserRegisterForm: Codable {
    private enum CodingKeys: String, CodingKey {
        case name
        case surname
        case password
        case birthday
        case email
        case subscribedToNewsLetter
    }
    
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        
        try container.encode(name, forKey: .name)
        try container.encode(surname, forKey: .surname)
        try container.encode(password, forKey: .password)
        try container.encodeIfPresent(_birthday, forKey: .birthday)
        try container.encode(email, forKey: .email)
        try container.encode(subscribedToNewsLetter, forKey: .subscribedToNewsLetter)
    }
    
    public init(from decoder: Swift.Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        
        name = try container.decode(String.self, forKey: .name)
        surname = try container.decode(String.self, forKey: .surname)
        password = try container.decode(String.self, forKey: .password)
        _birthday = try container.decodeIfPresent(SwiftProtobuf.Google_Protobuf_Timestamp.self, forKey: .birthday)
        email = try container.decode(String.self, forKey: .email)
        subscribedToNewsLetter = try container.decode(Bool.self, forKey: .subscribedToNewsLetter)
    }
}